var documenterSearchIndex = {"docs":
[{"location":"SamplingRateSettings/#Sample-Rate-control-1","page":"Sample Rate control","title":"Sample Rate control","text":"","category":"section"},{"location":"SamplingRateSettings/#","page":"Sample Rate control","title":"Sample Rate control","text":"EqualizerFilters.sampling_rate","category":"page"},{"location":"SamplingRateSettings/#EqualizerFilters.sampling_rate","page":"Sample Rate control","title":"EqualizerFilters.sampling_rate","text":"EqualizerFilters.sampling_rate(custom_sampling_rate)\n\nSet the sampling rate for calculation of the biquads in Hz.\n\nDefaults to 48 kHz.\n\n\n\n\n\nEqualizerFilters.sampling_rate()\n\nReturn the current sampling rate for biquad calculation in Hz.\n\nDefaults to 48 kHz.\n\n\n\n\n\n","category":"function"},{"location":"SamplingRateSettings/#","page":"Sample Rate control","title":"Sample Rate control","text":"The functions are not exported by default, so you'll usually have to call them as EqualizerFilters.sampling_rate().","category":"page"},{"location":"TupleFormat/#Tuple-Format-1","page":"Tuple Format","title":"Tuple Format","text":"","category":"section"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"EQ chains can be represented in the tuple format, allowing them to be converted to DSP.jl-filters as well as sampling rate-independent EQ APO configuration strings.","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"Possible tuple formats are:","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"([:PK|:LS|:HS], f, dbGain, Q)\n([:LP|:HP|:BP|:NO|:AP], f, Q)\n([:G|:D|:Ds], parameter)","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"The filter types have the more or less intuitive meanings of:","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":":PK for peaking filter\n:LS for low shelf filter\n:HS for high shelf filter\n:LP for lowpass filter\n:HP for high pass filter\n:BP for band pass filter\n:NO for notch filter\n:AP for all pass filter\n:G for gain filter with gain in dB\n:D for delay filter with delay in ms\n:Ds for delay filter with delay in samples.","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"Delay Filters cannot be converted to DSP.jl-filters as they do not have a proper coefficient representation.","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"The tuples can be arranged in arrays like this:","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"[(:LS, 60, 6, .707), (:PK, 9e3, -5, 2)]","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"The single tuples can be converted to a DSP.jl-Biquad by calling the constructor Biquad(tuple).","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"Arrays of Tuples can be converted to DSP.jl-SecondOrderSections with the constructor SecondOrderSections(tupleArray).","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"If you want to convert the filter tuple or filter tuple array to the corresponding string in Equalizer APO configuration file format, use eqAPOstring(tupleArray).","category":"page"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"eqAPOString can also be used to convert an arbitrary DSP.jl-filter to Equalizer APO by using second order IIRs with custom coefficients.","category":"page"},{"location":"TupleFormat/#Function-Reference-1","page":"Tuple Format","title":"Function Reference","text":"","category":"section"},{"location":"TupleFormat/#DSP.jl-filters-1","page":"Tuple Format","title":"DSP.jl-filters","text":"","category":"section"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"Biquad\nSecondOrderSections","category":"page"},{"location":"TupleFormat/#DSP.Filters.Biquad","page":"Tuple Format","title":"DSP.Filters.Biquad","text":"Biquad(filterType::Symbol, f, dbGain, Q)\n\nReturn peak, low shelf or high shelf biquad depending on respective filterType  :PK, :LS or :HS. Parameters are center frequency f in Hz,  Gain dbGain in dB and the quality factor Q.\n\nThe sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\nBiquad(filterType::Symbol, f, Q)\n\nReturn lowpass, highpass, bandpass, notch or allpass biquad depending on respective filterType :LP, :HP, :BP, :NO or :AP. Parameters are frequency f in Hz and the quality factor Q.\n\nThe sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\nBiquad(filterType::Symbol, dbGain)\n\nWhen filterType is :G for Gain return the field level ratio given by the parameter dbGain in dB. Throw error for other filterType.\n\n\n\n\n\nBiquad(x::Tuple{Symbol, Vararg})\n\nReturn Biquad of a filter specified in a tuple format, where the first argument is a symbol and defines the filter type: ([:LP, :HP, :BP, :NO, :AP, :PK, :LS, :HS, :G], f, dbGain, Q)\n\nFor non-gain filter types [:LP, :HP, :BP, :NO, :AP] the argument dbGain is to be omitted. For the simple gain-filter :G the arguments f and Q shall be omitted.\n\nf is in Hz and dbGain in dB. The quality factor Q is dimensionless.\n\nThe filter types refert to a lowpass, highpass, bandpass, notch, allpass, peaking, low shelf, high shelf and gain filter respectively.\n\nThe sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"type"},{"location":"TupleFormat/#DSP.Filters.SecondOrderSections","page":"Tuple Format","title":"DSP.Filters.SecondOrderSections","text":"SecondOrderSections(x::Tuple{Symbol, Vararg})\n\nReturn a filter specified in a tuple format as SecondOrderSections, where the first argument is a symbol and defines the filter type: ([:LP, :HP, :BP, :NO, :AP, :PK, :LS, :HS, :G], f, dbGain, Q)\n\nFor non-gain filter types [:LP, :HP, :BP, :NO, :AP] the argument dbGain is to be omitted. For the simple gain-filter :G the arguments f and Q shall be omitted.\n\nf is in Hz and dbGain in dB. The quality factor Q is dimensionless.\n\nThe filter types refert to a lowpass, highpass, bandpass, notch, allpass, peaking, low shelf, high shelf and gain filter respectively.\n\nThe sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\nSecondOrderSections(x::Array{T} where {T <: Tuple{Symbol, Vararg}})\n\nReturn SecondOrderSections that represent the filters defined in the array in a tuple format. For details of the tuple format see Biquad(x::Tuple{Symbol, Vararg}).\n\n\n\n\n\n","category":"type"},{"location":"TupleFormat/#EQ-APO-config-strings-1","page":"Tuple Format","title":"EQ APO config strings","text":"","category":"section"},{"location":"TupleFormat/#","page":"Tuple Format","title":"Tuple Format","text":"eqAPOstring","category":"page"},{"location":"TupleFormat/#EqualizerFilters.eqAPOstring","page":"Tuple Format","title":"EqualizerFilters.eqAPOstring","text":"eqAPOstring(filterType::Symbol, f, dbGain, Q)\n\nConvert a three-parameter filter to a string in Equalizer APO configuration file format.\n\nAs filterType use:\n\n:PK for peaking filter\n:LS for low shelf filter\n:HS for high shelf filter\n\nParameters are the center frequency f in Hz, the Gain dbGain in dB and the quality factor Q.\n\n\n\n\n\neqAPOstring(filterType::Symbol, f, Q)\n\nConvert a two-parameter filter to a string in Equalizer APO configuration file format.\n\nAs filterType use:\n\n:LP for lowpass filter\n:HP for high pass filter\n:BP for band pass filter\n:NO for notch filter\n:AP for all pass filter\n\nParameters are the frequency f in Hz and the quality factor Q.\n\n\n\n\n\neqAPOstring(filterType::Symbol, param)\n\nCovert a gain or delay filter to a string in Equalizer APO configuration file format.\n\nAs filterType use:\n\n:G for gain filter with gain in dB\n:D for delay filter with delay in ms\n:Ds for delay filter with delay in samples.\n\n\n\n\n\neqAPOstring(x::Array{T} where {T <: Tuple{Symbol, Vararg}})\n\nConvert an array of filters in a tuple format to a string in Equalizer APO configuration file format.\n\nThe tuples in the array shall constructed according to:\n\n([:G|:D|:Ds|:LP|:HP|:BP|:NO|:AP|:PK|:LS|:HS], f, dbGain, Q)\n\nDepending on the filter please omit the unneeded arguments. See other methods of eqAPOstring for details.\n\n\n\n\n\neqAPOstring(x::FilterCoefficients)\n\nConvert the given DSP.jl Filter to a string in Equalizer APO configuration file format.\n\nThe conversion uses second order sections and spreads the gain evenly among all biquads.\n\n\n\n\n\n","category":"function"},{"location":"#Quickstart-1","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"#Installation-1","page":"Quickstart","title":"Installation","text":"","category":"section"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"]add ADDLINK","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"Start using the package with","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"using EqualizerFilters","category":"page"},{"location":"#Sample-Rate-1","page":"Quickstart","title":"Sample Rate","text":"","category":"section"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"The default sample rate is 48 kHz. To set a different sample rate of 96 kHz use","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"EqualizerFilters.sampling_rate(96e3)","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"You can always check the current sample rate with","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"EqualizerFilters.sampling_rate()","category":"page"},{"location":"#Filters-1","page":"Quickstart","title":"Filters","text":"","category":"section"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"To get the Biquad filter corresponding to a 6 dB low shelf of Q 0.707 at 60 Hz use:","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"LS(60, 6, .707)","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"Chaining the filters into SecondOrderSections, for example with an additional peaking filter, is no problem:","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"LS(60, 6, .707)*PK(9e3, -5, 2)","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"You could convert these filters into Equalizer APO configuration strings by doing:","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"eqAPOstring(LS(60, 6, .707)*PK(9e3, -5, 2))","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"which results in custom coefficient IIR filters.","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"However you may want to have the EQ APO filters in non-sample rate dependent manner or more easily adjustable after the fact. For this purpose you can define the filters in an array of tuples and then convert them to DSP.jl-filters:","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"x = [\n  (:LS, 60, 6, .707), (:PK, 9e3, -5, 2)\n  ]\nSecondOrderSections(x)","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"or to Equalizer APO configuration strings:","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"eqAPOstring(x)","category":"page"},{"location":"#","page":"Quickstart","title":"Quickstart","text":"For a list of available filters see Individual Filters.","category":"page"},{"location":"IndividualFilters/#Individual-Filters-1","page":"Individual Filters","title":"Individual Filters","text":"","category":"section"},{"location":"IndividualFilters/#","page":"Individual Filters","title":"Individual Filters","text":"PK\nLS\nHS\nLP\nHP\nBP\nNO\nAP","category":"page"},{"location":"IndividualFilters/#EqualizerFilters.PK","page":"Individual Filters","title":"EqualizerFilters.PK","text":"PK(f, dbGain, Q, fs=sampling_rate)\n\nReturn peaking biquad with Gain dbGain in dB at frequency f in Hz with quality factor Q.\n\nIn this implementation the Gain at 0 Hz and at the Nyquist frequency will always be 0 dB. For an Orfanidis-like peak EQ with analog-inspired Nyquist-gain see the package LakeBiquads.jl.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.LS","page":"Individual Filters","title":"EqualizerFilters.LS","text":"LS(f, dbGain, Q, fs=sampling_rate)\n\nReturn low shelf biquad with Gain dbGain in dB, center frequency f in Hz and quality factor Q.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.HS","page":"Individual Filters","title":"EqualizerFilters.HS","text":"HS(f, dbGain, Q, fs=sampling_rate)\n\nReturn high shelf biquad with Gain dbGain in dB, center frequency f in Hz and quality factor Q.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.LP","page":"Individual Filters","title":"EqualizerFilters.LP","text":"LP(f, Q, fs=sampling_rate)\n\nReturn lowpass biquad at frequency f in Hz with quality factor Q.\n\nThis second order lowpass falls of with 12 dB/oct.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.HP","page":"Individual Filters","title":"EqualizerFilters.HP","text":"HP(f, Q, fs=sampling_rate)\n\nReturn highpass biquad at frequency f in Hz with quality factor Q.\n\nThis second order highpass falls of with 12 dB/oct.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.BP","page":"Individual Filters","title":"EqualizerFilters.BP","text":"BP(f, Q, fs=sampling_rate)\n\nReturn bandpass biquad at frequency f in Hz with quality factor Q.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.NO","page":"Individual Filters","title":"EqualizerFilters.NO","text":"NO(f, Q, fs=sampling_rate)\n\nReturn notch biquad at frequency f in Hz with quality factor Q.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"},{"location":"IndividualFilters/#EqualizerFilters.AP","page":"Individual Filters","title":"EqualizerFilters.AP","text":"AP(f, Q, fs=sampling_rate)\n\nReturn allpass biquad at frequency f in Hz with quality factor Q.\n\nThis second order allpass rotates the phase by a total of 2π.\n\nIf not given in the arguments, the sampling rate defaults to 48 kHz or can be set with EqualizerFilters.sampling_rate.\n\n\n\n\n\n","category":"function"}]
}
